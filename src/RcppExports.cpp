// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// my_gig
NumericMatrix my_gig(int n, NumericVector lambda, NumericVector chi, NumericVector psi);
RcppExport SEXP _bayesianVARs_my_gig(SEXP nSEXP, SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(my_gig(n, lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
// draw_PHI
arma::mat draw_PHI(arma::mat PHI, arma::mat PHI_prior, arma::mat Y, arma::mat X, arma::mat L, arma::mat d, arma::vec V_i, int K, int M);
RcppExport SEXP _bayesianVARs_draw_PHI(SEXP PHISEXP, SEXP PHI_priorSEXP, SEXP YSEXP, SEXP XSEXP, SEXP LSEXP, SEXP dSEXP, SEXP V_iSEXP, SEXP KSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type PHI(PHISEXP);
    Rcpp::traits::input_parameter< arma::mat >::type PHI_prior(PHI_priorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V_i(V_iSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_PHI(PHI, PHI_prior, Y, X, L, d, V_i, K, M));
    return rcpp_result_gen;
END_RCPP
}
// draw_L
arma::mat draw_L(arma::mat Ytilde, arma::vec V_i, arma::mat d);
RcppExport SEXP _bayesianVARs_draw_L(SEXP YtildeSEXP, SEXP V_iSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ytilde(YtildeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V_i(V_iSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_L(Ytilde, V_i, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayesianVARs_my_gig", (DL_FUNC) &_bayesianVARs_my_gig, 4},
    {"_bayesianVARs_draw_PHI", (DL_FUNC) &_bayesianVARs_draw_PHI, 9},
    {"_bayesianVARs_draw_L", (DL_FUNC) &_bayesianVARs_draw_L, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayesianVARs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

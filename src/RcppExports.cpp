// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bvar_cpp
List bvar_cpp(const arma::mat& Y, const arma::mat& X, const int& M, const int& T, const int& K, const int& draws, const int& burnin, const int& thin, const std::string& tvp_keep, const int& intercept, const arma::vec priorIntercept, arma::mat& PHI0, const List priorPHI_in, const List priorSigma_in, const List startvals_in, const arma::imat& i_mat, const arma::ivec& i_vec, const bool& progressbar, const double& PHI_tol, const double& L_tol, const bool& huge);
RcppExport SEXP _bayesianVARs_bvar_cpp(SEXP YSEXP, SEXP XSEXP, SEXP MSEXP, SEXP TSEXP, SEXP KSEXP, SEXP drawsSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP tvp_keepSEXP, SEXP interceptSEXP, SEXP priorInterceptSEXP, SEXP PHI0SEXP, SEXP priorPHI_inSEXP, SEXP priorSigma_inSEXP, SEXP startvals_inSEXP, SEXP i_matSEXP, SEXP i_vecSEXP, SEXP progressbarSEXP, SEXP PHI_tolSEXP, SEXP L_tolSEXP, SEXP hugeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< const int& >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type tvp_keep(tvp_keepSEXP);
    Rcpp::traits::input_parameter< const int& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type priorIntercept(priorInterceptSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type PHI0(PHI0SEXP);
    Rcpp::traits::input_parameter< const List >::type priorPHI_in(priorPHI_inSEXP);
    Rcpp::traits::input_parameter< const List >::type priorSigma_in(priorSigma_inSEXP);
    Rcpp::traits::input_parameter< const List >::type startvals_in(startvals_inSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type i_mat(i_matSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type i_vec(i_vecSEXP);
    Rcpp::traits::input_parameter< const bool& >::type progressbar(progressbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type PHI_tol(PHI_tolSEXP);
    Rcpp::traits::input_parameter< const double& >::type L_tol(L_tolSEXP);
    Rcpp::traits::input_parameter< const bool& >::type huge(hugeSEXP);
    rcpp_result_gen = Rcpp::wrap(bvar_cpp(Y, X, M, T, K, draws, burnin, thin, tvp_keep, intercept, priorIntercept, PHI0, priorPHI_in, priorSigma_in, startvals_in, i_mat, i_vec, progressbar, PHI_tol, L_tol, huge));
    return rcpp_result_gen;
END_RCPP
}
// my_gig
NumericMatrix my_gig(int n, NumericVector lambda, NumericVector chi, NumericVector psi);
RcppExport SEXP _bayesianVARs_my_gig(SEXP nSEXP, SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(my_gig(n, lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayesianVARs_bvar_cpp", (DL_FUNC) &_bayesianVARs_bvar_cpp, 21},
    {"_bayesianVARs_my_gig", (DL_FUNC) &_bayesianVARs_my_gig, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayesianVARs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
